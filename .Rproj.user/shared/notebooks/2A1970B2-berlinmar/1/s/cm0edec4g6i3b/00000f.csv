"0",""
"0",""
"0","# Function to convert seconds to HH:MM format"
"0","seconds_to_hhmm <- function(seconds) {"
"0","  hours <- floor(seconds / 3600)"
"0","  minutes <- floor((seconds %% 3600) / 60)"
"0","  sprintf(""%02d:%02d"", hours, minutes)"
"0","}"
"0",""
"0","# Calculate median times and total runners"
"0","berlin_2019 %>%"
"0","  group_by(nationality) %>%"
"0","  summarise("
"0","    median_time_overall = median(as.numeric(time_full), na.rm = TRUE),"
"0","    total_runners = n(),  # Total number of runners"
"0","    .groups = ""drop"""
"0","  ) %>%"
"0","  filter(total_runners >= 10) %>%  # Filter countries with fewer than 10 runners"
"0","  ggplot(aes(x = median_time_overall, y = total_runners, label = nationality,"
"0","             text = paste0(""<b>Country:</b> "", nationality,"
"0","                           ""<br><b>Median Time Overall:</b> "", seconds_to_hhmm(median_time_overall),"
"0","                           ""<br><b>Total Runners:</b> "", total_runners))) +"
"0","  geom_point(color = ""blue"", alpha = 0.7) +  # Simple dots"
"0","  geom_text_repel(aes(label = nationality), max.overlaps = 20, size = 3, color = ""black"") +  # Add country labels"
"0","  scale_x_continuous("
"0","    labels = seconds_to_hhmm, "
"0","    name = ""Median Time Overall (HH:MM)"","
"0","    limits = c(10800, 21600)  # Limit to 3 to 6 hours"
"0","  ) +"
"0","  scale_y_log10("
"0","    name = ""Total Runners (Log Scale)"","
"0","    breaks = c(10, 50, 100, 500, 1000),  # Set custom log breaks"
"0","    labels = scales::comma  # Format y-axis labels with commas"
"0","  ) +"
"0","  labs("
"0","    title = ""Median Time Overall vs. Total Runners (Log Scale)"","
"0","    subtitle = ""Only countries with more than 10 runners are included"","
"0","    x = ""Median Time Overall (HH:MM)"","
"0","    y = ""Total Runners (Log Scale)"""
"0","  ) +"
"0","  theme_minimal() +"
"0","  theme("
"0","    axis.title = element_text(size = 12, face = ""bold""),"
"0","    axis.text = element_text(size = 10),"
"0","    plot.caption = element_text(hjust = 0.5, size = 10, face = ""italic"")  # Style for the note"
"0","  ) -> p"
"0",""
"0","# Convert to an interactive plot"
"0","ggplotly(p, tooltip = ""text"")"
"2","Warning: geom_GeomTextRepel() has yet to be implemented in plotly.
  If you'd like to see this geom implemented,
  Please open an issue with your example code at
  https://github.com/ropensci/plotly/issues"
